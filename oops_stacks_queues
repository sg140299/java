IN OOPS:
Noun : Class
Adjective : Data Member
Verb : Functions

STACK - LIFO  Insert- O(1)  Delete - O(1) 
QUEUE - FIFO  Insert- O(1)  Delete - O(1)
------------------------------------------------------------------------------------------------------------------------------------------------------
Class is a blueprint, 

class_name obj=new class_name();   //obj is a reference pointing to an object.
Objects are created in heap memory.
Refrence of obj is stored in stack memory.
Dot operator is used to print the properties.

Acess Specifiers :
1 Private : Visible inside same class.
2 Public  : Visible Everywhere.
3 Default : Visible inside same package.

this keyword is used in java to acess the current objet attribute.

Constructor 
  It is used to initialize the instance variables of a particular object.
  Have no return type not even void.
  They are of the same name as that of the class.
  Look like function only.
  
  
Throws exception 

public void setname(String name) throws Exception{
  if(name.equals("") || name==null){
    throw new Exception("This is an exception")
    } 
    this.name=name;
 }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Static and final keyword

static means it belong to the class not to object it means that if its value changes further then it reflects in each and every object.
static function can only access static data members not access instance variables, this can't be used with static function as well as static variable
A non-static function can access both static as well as non-static variables
Acessing static var :  class_name.attribute   
final means its value set once not change further.(can be public)

Array of objects:
class_name[] name=new class_name[1000];
for(int i=0;i<name.length;i++){
  name[i]=new class_name();
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------
Exception Handling

You have to declare both calling and called function as dangerous both.
Exception canbe handled through try/catch.

Inside try write dangerous function
try{
s1.setage(-10);//after statements not executed if error comes
}
catch(Exception e){
syso("In catch");//after statemets are executed
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------
Stack using arrays:


public class StackUsingArrays{
  public int[] data;
  public int top;
  public static final int DEFAULT_CAPACITY=10;
  public StackUsingArrays(){
    this(DEFAULT_CAPACITY);
  }
  public StackUsingArrays(int capacity) throws Exception{
    if(DEFAULT_CAPACITY<1){
      throw new Exception("CAPACITY IS INVALID");
    }
    this.data=new int[capacity];
}


void push(int value) throws Eaception{         //O(1)
  if(this.top==array.length){
    throw new Exception("u get an exception");
  }
  this.top++;
  this.array[this.top]=value;
}

int pop() throws new Exception{                //O(1)
if(this.top<0){
  throws new Exception("ur stack is finished");
}
  int v=this.array[this.top];
  this.array[this.top]=0;
  this.top--;
  return v;
}


int top() throws new Exception{                //O(1)
if(this.top<0){
  throws new Exception("ur stack is finished");
}
  int v=this.array[this.top];
  return v;
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
==============================================================================
Practical implementation of stack is refresh and go back to browser.
==============================================================================

-------------------------
Inheritance   //all properties and functions of parent are accessible through child also

public class C extends P{

}
Before main execution blueprint of child and parent came in heap.

4 Types :
================================
Refrence  |    Instance
================================
Parent    |    Parent
Parent    |    Child
Child     |    Parent
Child     |    Child
=================================
P as parent and C as child
Case 1: Parent as refrence as well as instance
---------------------------------------------------------------------------------------------------
P obj           =         new P(); 
refrence                  instance
---------------------------------------------------------------------------------------------------
Case 2 : Parent as refrence and child as instance
---------------------------------------------------------------------------------------------------
P obj           =         new C();
refrence                  instance

**When u r writing the code then the entire hands is in the hands of ur compiler and compiler will see his left hand side 
**When u r executing ur program then the entire control is in hands of JVM and jvm will see the right hand side.
Typecasting of class 
((C)obj).param
Collision of params will be resolved by refrence in both parent and child for data members only while for functions its checks that if there is func in child then it
will run else go to parent.
Compile type error are better than runtime error
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Case 3 is not allowed in java 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Case 4 :Child as refrence as well as instance :
During same func name in both parent and child, the child func is called always never parent is called. As func call is by instance. 
But to access the parent data members typecasting can be used.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
METHOD OVERRIDING
Method means function ,  Overriding is a feature that allows a child class to provide a specific implementation of a method that is already provided by its parent class
Abbreviation used is @Override  Func in parent and child have same name, same no of params, same data type of params, same return type of function etc.

METHOD OVERLOADING
Overloading is a feature such that the name of function is same and the data type of arguments are same then the functions are called as overloaded.
Oerloading never done on the basis of return type.
 public static void fun(int... args){   
    int ans=0;                           
    for(int val:args){
        ans+=val;
    }
    return ans;
}
Variable arguments is called only if it not get corresponding arguents in any fun call.
Variable arguments of diff type is not allowed i.e.  fun(int... args,double... args) is not allowed in java.
Vriable arguments is placed in last as a parameter i.e   fun(int... args,String s) is not allowed correct is fun(String s,int... args)  
Variable arguments is just an array of elements.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DYNAMIC STACK
Stack is make of the size u passed or 10 size.
Stack is applicable as an array.

public class DynamicStack extends StackUsingArray{
    public DynamicStack() throws Exception{
        this(DEFAULT_CAPACITY);
    }
    public DynamicStack(int capacity) throws Exception{
        super(capacity);
    }
    public void push(int item){
        if(this.size()==this.data.length){
            int[] arr=new int[2*this.data.length];
            for(int i=0;i<this.data.length;i++){
                arr[i]=this.data[i];
            }
            this.data=arr;
         }
         super.push(item);
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Reverse a stack
public static void reverseStack(Stackusingarray stack,Stackusingarray helper,int index){
    if(stack.size()==0){
        return;
    }
    int item=stack.pop();
    reverseStack(stack,helper,index+1);
    helper.push(item);
    if(index==0){
        while(!helper.isEmpty()){
            stack.push(helper.pop());
        }
   }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NEXT GREATER ELEMENT 








